from abc import ABCMeta, abstractmethod
from bci_framework.api.utils import WebSocket
import json
from browser import timer, html, document

StimuliServer = None


########################################################################
class BCIWebSocket(WebSocket):
    """"""

    # ----------------------------------------------------------------------
    def on_open(self, evt):
        """"""
        print('Opened')
        self.send({'action': 'register'})

    # ----------------------------------------------------------------------
    def on_message(self, evt):
        """"""
        data = json.loads(evt.data)
        print("MESSAGE", data, self.main)
        if 'method' in data:
            getattr(self.main, data['method']).no_decorator(self.main, *data['args'], **data['kwargs'])

    # ----------------------------------------------------------------------
    def on_close(self, evt):
        """"""
        self.main.stop()
        print('Closed WS')
        timer.set_timeout(lambda: self.__init__(f'ws://localhost:{self.ip_}/ws'), 1000)

    # # ----------------------------------------------------------------------
    # def on_error(self, evt):
        # """"""
        # self.main.stop()
        # print('Error WS')
        # self.__init__(self.ip)


# ----------------------------------------------------------------------
def stimulus(method):
    def wrap(self, *args, **kwargs):

        if self._bci_mode in ['development', 'dashboard']:
            print('Calling', method.__name__, args, kwargs)
            method(self, *args, **kwargs)
            self.ws.send({'action': 'feed',
                          'method': method.__name__,
                          'args': args,
                          'kwargs': kwargs,
                          })
            print('Called!!')

    wrap.no_decorator = method
    return wrap


########################################################################
class StimuliAPI(metaclass=ABCMeta):
    """"""

    # ----------------------------------------------------------------------
    def connect(self, ip=5000):
        """"""
        self.ws = BCIWebSocket(f'ws://localhost:{ip}/ws')
        self.ws.main = self

    # ----------------------------------------------------------------------
    @abstractmethod
    def start(self):
        """"""

    # ----------------------------------------------------------------------
    @abstractmethod
    def stop(self):
        """"""

    # ----------------------------------------------------------------------
    @property
    def dashboard(self):
        """"""
        if not hasattr(self, 'bci_dashboard'):
            self.bci_dashboard = html.DIV(Class='bci_dashboard')
            document <= self.bci_dashboard
        return self.bci_dashboard

    # ----------------------------------------------------------------------
    @property
    def stimuli_area(self):
        """"""
        if not hasattr(self, 'bci_stimuli'):
            self.bci_stimuli = html.DIV(Class='bci_stimuli')
            document <= self.bci_stimuli
        return self.bci_stimuli





